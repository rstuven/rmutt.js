_ = require 'lodash'
runtime = require './runtime'
parse = require './parse'
product = require '../package.json'
push = Array.prototype.push

###
# transpile
###
module.exports = (input, config) ->
  config ?= {}
  if typeof input is 'string'
    rules = parse input, config
  else
    rules = input
  result = transpile rules, config
  # console.log result
  result

ROOT_SCOPE_VAR = '$root'
LOCAL_SCOPE_VAR = '$'

transpile = (rules, config) ->
  # console.dir rules, colors: true, depth:10
  result = []

  # header
  result.push '// Generated by ', product.name, ' ', product.version, '\n'
  result.push '// ', config.header, '\n' if config.header?

  # exportable
  result.push 'module.exports = function($config) {\n'

  # fallback
  result.push '$config = $config || {};\n'

  # runtime
  _.each runtime, (fn, name) ->
    result.push 'var $', name , ' = (', fn.toString(), ')();\n'

  # root scope
  result.push 'var ', ROOT_SCOPE_VAR, ' = new $Scope();\n\n'
  _.each rules, (rule, name) ->
    return if name is '$entry'
    push.apply result, concat [
      generateAssignment ROOT_SCOPE_VAR, rule, generateRuleDefinition rule
      '();\n\n'
    ]

  # kick off
  entry = config.entry ? rules.$entry
  if entry?
    result.push 'return ', ROOT_SCOPE_VAR, ".invoke($config.entry || '#{entry}')();\n"
  else
    result.push 'if ($config.entry != null) return ', ROOT_SCOPE_VAR,'.invoke($config.entry)();\n'

  # done!
  result.push '};'

  result.join ''

# TODO: Study extensibility model for composable externals
composable = ['Mapping']

types =

  Assignment: (rule) ->
    generateAssignment LOCAL_SCOPE_VAR, rule, generateRule rule.expr

  Choice: (rule) ->

    # Simplify single choice
    if rule.items.length is 1 and rule.items[0].type isnt 'Multiplied'
      return generateRule rule.items[0]

    lazyRules = pushJoin ', ', rule.items.map (rule) ->
      return "''" if not rule?
      if rule.type is 'Multiplied'
        multiplied = Array rule.multiplier
        _.fill multiplied, generateRule rule.expr
        pushJoin ', ', multiplied
      else
        generateRule rule

    concat [
      '$choice('
      lazyRules
      ')'
    ]

  Invocation: (rule) ->
    args = rule.args?
    concat [
      LOCAL_SCOPE_VAR
      '.invoke'
      "('#{rule.name}'"
      if args then ', ['
      if args then generateRules rule.args
      if args then ']'
      ')'
    ]

  Multiplied: (rule) ->
    # Ignore rule.multiplier (parsed at this level for backward compatibility).
    # See it in action in Choice type.
    generateRule rule.expr

  Mapping: (rule) ->
    concat [
      '$mapping('
      generateRule rule.search
      ', '
      generateRule rule.replace, true
      ')'
    ]

  Repetition: (rule) ->
    concat [
      '$repeat('
      generateRule rule.expr, true
      ', '
      JSON.stringify rule.range
      ')'
    ]

  Rule: (rule) ->
    generateAssignment LOCAL_SCOPE_VAR, rule, generateRuleDefinition rule

  Terms: (rule) ->

    # Simplify single term
    if rule.items.length is 1
      return generateRule rule.items[0]

    fn = if _.all(rule.items, (item) -> item.type in composable)
      '$compose'
    else
      '$concat'

    concat [
      fn
      '('
      generateRules rule.items
      ')'
    ]

  Transformation: (rule) ->
    # for transformation chaining, we need to make the tree left-recursive
    if rule.type is 'Transformation' and rule.func.type is 'Transformation'
      rule = makeTreeLeftRecursive rule, 'Transformation', 'expr', 'func'

    concat [
      '$transform('
      generateRule rule.expr
      ', '
      generateRule rule.func
      ')'
    ]

concat = (values) ->
  values.reduce (ret, value) ->
    ret.concat value
  , []

generateAssignment = (scope, rule, generated) ->
  concat [
    scope
    ".assign('#{rule.name}', "
    generated
    if rule.scope? then ", '#{rule.scope}'"
    ')'
  ]

generateRule = (rule) ->
  return '""' unless rule?
  return JSON.stringify rule if typeof rule is 'string'
  unless types[rule.type]?
    throw new Error 'No transpilation defined for rule type: ' + rule.type
  types[rule.type] rule

generateRuleDefinition = (rule) ->
  concat [
    '$rule(function rule__'
    rule.name.replace(/-/g, '_').replace(/\./g, '__')
    '('
    LOCAL_SCOPE_VAR,
    ') { \n'
    'return '
    generateRule rule.expr
    ';\n}'
    if rule.args? then ', ' + JSON.stringify rule.args
    ')'
  ]

generateRules = (rules) ->
  pushJoin ', ', rules.map (rule) -> generateRule rule

###
Convert a right-recursive tree to a left-recursive tree.

(node1 (node2 (node3 node4))) => (((node1 node2) node3) node4)

type: type                  type: type
left: node1                 left:
right:                        type: type
  type: type                  left:
  left: node2        =>         type: type
  right:                        left: node1
    type: type                  right: node2
    left: node3               right: node3
    right: node4            right: node4

###
makeTreeLeftRecursive = (node, type, left, right, fifo) ->
  if fifo?
    flipped = type: type
    if node.type is type
      fifo.push node[left]
      flipped[left] = makeTreeLeftRecursive node[right], type, left, right, fifo
      flipped[right] = fifo.shift()
    else
      flipped[left] = fifo.shift()
      flipped[right] = fifo.shift()
      fifo.push node
    flipped
  else
    makeTreeLeftRecursive node[right], type, left, right, [node[left]]

pushJoin = (join, array) ->
  ret = []
  array.forEach (item, index) ->
    return unless item?
    ret.push join if index > 0
    if item instanceof Array
      push.apply ret, item
    else
      ret.push item
  ret
